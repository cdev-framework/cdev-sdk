from pydantic.main import BaseModel
from enum import Enum
from typing import List, Optional, Dict 

from ...models import Cloud_Output, Rendered_Resource

from ...backend import cloud_mapper_manager

{% macro render_flatstruct(struct) -%}
class {{struct.get("name")}}(BaseModel):
    {%if struct.get('documentation')%}
    """
    {{markdownify(struct.get('documentation').strip())}}
    """
    {%endif%}


{% for attribute_name, val in struct.get("attributes").items() %}
    {% if val.get("type") == "string"%}
    {{pythonify_symbol(attribute_name)}}: str
    {% elif val.get("type") == "boolean"%}
    {{pythonify_symbol(attribute_name)}}: bool
    {% elif val.get("type") == "list"%}
    {{pythonify_symbol(attribute_name)}}: List[{{val.get("val_type")}}]
    {% elif val.get("type") == "enum"%}
    {{pythonify_symbol(attribute_name)}}: {{val.get("name")}} 
    {% elif val.get("type") == "structure"%}
    {{pythonify_symbol(attribute_name)}}: {{val.get("name")}} 
    {% elif val.get("type") == "long"%}
    {{pythonify_symbol(attribute_name)}}: int
    {% elif val.get("type") == "integer"%}
    {{pythonify_symbol(attribute_name)}}: int
    {%else%}
    {{pythonify_symbol(attribute_name)}}; {{val}}
    Bad
    {% endif %}
    {% if val.get('documentation')%}
    """
    {{markdownify(val.get('documentation').strip())}}
    """
    {% endif %}

{% endfor %}

    def __init__(self, {{flatten_structure_to_params(struct.get("attributes"))}} ):
        "My doc string"
        super().__init__(**{
            {%for attribute_name in struct.get("attributes") %}
            "{{attribute_name}}": {{attribute_name}},
            {%endfor%}
        })        


{% endmacro -%}

{% for item in var %}
{% if var.get(item).get("type") == "string" %}
{% if "enum" in var.get(item)%}
class {{item}}(str, Enum): 
    {%if var.get(item).get('documentation')%}
    """
    {{markdownify(var.get(item).get('documentation').strip())}}
    """
    {%endif%}


    {% for enum_val in var.get(item).get("enum") %}
    {{pythonify_symbol(enum_val)}} = '{{enum_val}}'
    
    {% endfor %}
    {% endif %}

{% else %}
    {% if var.get(item).get("type") == "structure" -%}
{{render_flatstruct(flatten_structure(item,var.get(item),  var))}}
    {% endif -%}
{% endif %}
{% endfor %}

{% for output in output_models%}
class {{output.get("name")}}(str, Enum):
    {%if output.get('documentation')%}
    """
    {{markdownify(output.get('documentation').strip())}}
    """
    {%endif%}

    {% for attribute in output.get("attributes")%}
    {{attribute.get('label')}} = "{{attribute.get('label')}}"
    {% if attribute.get('documentation')%}
    """
    {{markdownify(attribute.get('documentation').strip())}}
    """
    {% endif %}

    {% endfor %}


{% endfor %}
{% for resource in resources %}
class {{resource.get("resource_name").lower()}}_model(Rendered_Resource):
    {%if resource.get('documentation')%}
    """

    {{markdownify(resource.get('documentation')).strip()}}
    
    """
    {%endif%}


    {% for attribute in resource.get("attributes")%}
    {% if attribute.get("type") == "string"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}str{{"]" if not attribute.get("isrequired") else ""}}
    {% elif attribute.get("type") == "boolean"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}bool{{"]" if not attribute.get("isrequired") else ""}}
    {% elif attribute.get("type") == "list"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}List[{{attribute.get("val_type")}}]{{"]" if not attribute.get("isrequired") else ""}}
    {% elif attribute.get("type") == "enum"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}{{attribute.get("name")}}{{"]" if not attribute.get("isrequired") else ""}} 
    {% elif attribute.get("type") == "structure"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}{{attribute.get("name")}}{{"]" if not attribute.get("isrequired") else ""}} 
    {% elif attribute.get("type") == "long"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}int{{"]" if not attribute.get("isrequired") else ""}}
    {% elif attribute.get("type") == "integer"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}int{{"]" if not attribute.get("isrequired") else ""}}
    {% elif attribute.get("type") == "map"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}Dict[{{attribute.get('key_type')}},{{attribute.get('val_type')}}]{{"]" if not attribute.get("isrequired") else ""}}
    {%else%}
    {{pythonify_symbol(attribute.get("param_name"))}}; {{attribute}}
    Bad
    {% endif %}
    {% if attribute.get('documentation')%}
    """
    {{markdownify(attribute.get('documentation')).strip()}}
    """
    {% endif %}

    {% endfor %}

    def filter_to_create(self, identifier) -> dict:
        NEEDED_ATTRIBUTES = set({{resource.get("as_list")}})

        return {k:v for k,v in self.dict().items() if k in NEEDED_ATTRIBUTES and v}

    def filter_to_remove(self, identifier) -> dict:
        NEEDED_ATTRIBUTES = set({{resource.get("remove_attributes")}})
        return {k:cloud_mapper_manager.get_output_value(identifier, k) for k in NEEDED_ATTRIBUTES }

    class Config:
        extra='ignore'


{% endfor %}