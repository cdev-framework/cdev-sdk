from pydantic.main import BaseModel
from enum import Enum
from typing import List, Optional

from ...models import Cloud_Output, Rendered_Resource

{% macro render_flatstruct(struct) -%}
class {{struct.get("name")}}(BaseModel):

{% for attribute_name, val in struct.get("attributes").items() %}
    {% if val.get("type") == "string"%}
    {{pythonify_symbol(attribute_name)}}: str

    {% elif val.get("type") == "boolean"%}
    {{pythonify_symbol(attribute_name)}}: bool

    {% elif val.get("type") == "list"%}
    {{pythonify_symbol(attribute_name)}}: List[{{val.get("val_type")}}]

    {% elif val.get("type") == "enum"%}
    {{pythonify_symbol(attribute_name)}}: {{val.get("name")}} 

    {% elif val.get("type") == "structure"%}
    {{pythonify_symbol(attribute_name)}}: {{val.get("name")}} 

    {% elif val.get("type") == "long"%}
    {{pythonify_symbol(attribute_name)}}: int

    {% elif val.get("type") == "integer"%}
    {{pythonify_symbol(attribute_name)}}: int

    {%else%}
    {{pythonify_symbol(attribute_name)}}; {{val}}
    Bad
    {% endif %}
{% endfor %}
{% endmacro -%}

{% for item in var %}
{% if var.get(item).get("type") == "string" %}
{% if "enum" in var.get(item)%}
class {{item}}(str, Enum): 

    {% for enum_val in var.get(item).get("enum") %}
    {{pythonify_symbol(enum_val)}} = '{{enum_val}}'

    {% endfor %}
    {% endif %}

{% else %}
    {% if var.get(item).get("type") == "structure" -%}
{{render_flatstruct(flatten_structure(item,var.get(item),  var))}}
    {% endif -%}
{% endif %}
{% endfor %}
{% for resource in resources %}

class {{resource.get("resource_name")}}(Rendered_Resource):
    {% for attribute in resource.get("attributes")%}
    {% if attribute.get("type") == "string"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}str{{"]" if not attribute.get("isrequired") else ""}}

    {% elif attribute.get("type") == "boolean"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}bool{{"]" if not attribute.get("isrequired") else ""}}

    {% elif attribute.get("type") == "list"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}List[{{attribute.get("val_type")}}]{{"]" if not attribute.get("isrequired") else ""}}

    {% elif attribute.get("type") == "enum"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}{{attribute.get("name")}}{{"]" if not attribute.get("isrequired") else ""}} 

    {% elif attribute.get("type") == "structure"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}{{attribute.get("name")}}{{"]" if not attribute.get("isrequired") else ""}} 

    {% elif attribute.get("type") == "long"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}int{{"]" if not attribute.get("isrequired") else ""}}

    {% elif attribute.get("type") == "integer"%}
    {{pythonify_symbol(attribute.get("param_name"))}}: {{"Optional[" if not attribute.get("isrequired") else ""}}int{{"]" if not attribute.get("isrequired") else ""}}

    {%else%}
    {{pythonify_symbol(attribute.get("param_name"))}}; {{attribute}}
    Bad
    {% endif %}
    {% endfor %}

    def __init__(__pydantic_self__, name: str, ruuid: str, hash:str, {{ resource.get("as_params") }} ) -> None:
        super().__init__(**{
            "ruuid": ruuid,
            "name": name,
            "hash": hash,
            {% for attribute in resource.get("attributes")%}
            "{{pythonify_symbol(attribute.get('param_name'))}}": {{pythonify_symbol(attribute.get('param_name'))}},
            {% endfor %}
        })
{% endfor %}